import { Awaitable, ButtonBuilder, ButtonInteraction, CacheType, If, InteractionButtonComponentData, InteractionCollector, JSONEncodable, MappedInteractionTypes, Message, MessageCollectorOptionsParams, MessageComponentInteraction, MessageComponentType, RepliableInteraction, RestOrArray } from 'discord.js';
import { Button, ButtonsOnDisable, RawButton } from '../../types/buttons';
import { PaginationControllerType, SendAs } from '../../types/enums';
import { BasePagination, BasePaginationData, BasePaginationEvents } from '../BasePagination';
export interface ButtonPaginationData extends BasePaginationData {
    buttons?: RawButton[];
    onDisable?: ButtonsOnDisable | keyof typeof ButtonsOnDisable;
    singlePageNoButtons?: boolean;
    collectorOptions?: Omit<MessageCollectorOptionsParams<MessageComponentType>, "time">;
}
export interface ButtonPaginationEvents extends BasePaginationEvents<MessageComponentInteraction> {
    'interactionCreate': [interaction: ButtonInteraction, controller: Button];
}
export interface ButtonPaginationBuilder<Sent extends boolean = boolean> extends BasePagination<MessageComponentInteraction, Sent> {
    on<E extends keyof ButtonPaginationEvents>(event: E, listener: (...args: ButtonPaginationEvents[E]) => Awaitable<void>): this;
    on<E extends string | symbol>(event: Exclude<E, keyof ButtonPaginationEvents>, listener: (...args: any) => Awaitable<void>): this;
    once<E extends keyof ButtonPaginationEvents>(event: E, listener: (...args: ButtonPaginationEvents[E]) => Awaitable<void>): this;
    once<E extends string | symbol>(event: Exclude<E, keyof ButtonPaginationEvents>, listener: (...args: any) => Awaitable<void>): this;
    emit<E extends keyof ButtonPaginationEvents>(event: E, ...args: ButtonPaginationEvents[E]): boolean;
    emit<E extends string | symbol>(event: Exclude<E, keyof ButtonPaginationEvents>, ...args: any): boolean;
    off<E extends keyof ButtonPaginationEvents>(event: E, listener: (...args: ButtonPaginationEvents[E]) => Awaitable<void>): this;
    off<E extends string | symbol>(event: Exclude<E, keyof ButtonPaginationEvents>, listener: (...args: any) => Awaitable<void>): this;
    removeAllListeners<E extends keyof ButtonPaginationEvents>(event?: E): this;
    removeAllListeners(event?: string | symbol): this;
}
export declare class ButtonPaginationBuilder<Sent extends boolean = boolean> extends BasePagination<MessageComponentInteraction, Sent> {
    protected _buttons: Button[];
    protected _onDisable: ButtonsOnDisable;
    protected _singlePageNoButtons: boolean;
    protected _collector: InteractionCollector<MappedInteractionTypes[MessageComponentType]> | null;
    protected _collectorOptions?: Omit<MessageCollectorOptionsParams<MessageComponentType>, "time">;
    get buttons(): Button[];
    get onDisable(): ButtonsOnDisable;
    get singlePageNoButtons(): boolean;
    get collector(): If<Sent, InteractionCollector<import("discord.js").StringSelectMenuInteraction<CacheType> | import("discord.js").UserSelectMenuInteraction<CacheType> | import("discord.js").RoleSelectMenuInteraction<CacheType> | import("discord.js").MentionableSelectMenuInteraction<CacheType> | import("discord.js").ChannelSelectMenuInteraction<CacheType> | ButtonInteraction<CacheType>>, null>;
    get collectorOptions(): Omit<{
        componentType?: MessageComponentType | undefined;
    } & import("discord.js").MessageComponentCollectorOptions<import("discord.js").StringSelectMenuInteraction<CacheType> | import("discord.js").UserSelectMenuInteraction<CacheType> | import("discord.js").RoleSelectMenuInteraction<CacheType> | import("discord.js").MentionableSelectMenuInteraction<CacheType> | import("discord.js").ChannelSelectMenuInteraction<CacheType> | ButtonInteraction<CacheType>>, "time"> | undefined;
    constructor(options?: ButtonPaginationData | JSONEncodable<ButtonPaginationData>);
    /**
     * Add button controller to pagination
     * @param button Button data or builder
     * @param type Controller type
     */
    addButton(button: ButtonBuilder | InteractionButtonComponentData, type: PaginationControllerType | keyof typeof PaginationControllerType): this;
    /**
     * Set button controllers
     * @param buttons Button controllers data
     */
    setButtons(...buttons: RestOrArray<RawButton>): this;
    /**
     * Action on disable
     * @param onDisable on disable action
     */
    setOnDisable(onDisable: ButtonsOnDisable | keyof typeof ButtonsOnDisable): this;
    /**
     * Disable pagination controllers with single page pagination
     * @param singlePageNoButtons single page no buttons
     */
    setSinglePageNoButtons(singlePageNoButtons: boolean): this;
    /**
     * Custom collector options
     * @param collectorOptions collector options
     */
    setCollectorOptions(collectorOptions?: Omit<MessageCollectorOptionsParams<MessageComponentType>, "time"> | null): this;
    paginate(command: Message | RepliableInteraction, sendAs?: SendAs | keyof typeof SendAs): Promise<ButtonPaginationBuilder<true>>;
    isSent(): this is ButtonPaginationBuilder<true>;
    toJSON(): ButtonPaginationData;
    protected _addCollector(): void;
    static resolveButton(button: RawButton): Button;
}
