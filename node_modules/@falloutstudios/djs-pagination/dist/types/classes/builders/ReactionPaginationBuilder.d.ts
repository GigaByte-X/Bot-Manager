import { Awaitable, If, JSONEncodable, Message, MessageReaction, ReactionCollector, ReactionCollectorOptions, RepliableInteraction, RestOrArray } from 'discord.js';
import { PaginationControllerType, SendAs } from '../../index';
import { RawReaction, Reaction, ReactionsOnDisable } from '../../types/reactions';
import { BasePagination, BasePaginationData, BasePaginationEvents } from '../BasePagination';
export interface ReactionPaginationData extends BasePaginationData {
    reactions?: (Reaction | RawReaction)[];
    onDisable?: ReactionsOnDisable | keyof typeof ReactionsOnDisable;
    singlePageNoReactions?: boolean;
    collectorOptions?: Omit<ReactionCollectorOptions, 'time'>;
}
export interface ReactionPaginationEvents extends BasePaginationEvents<MessageReaction> {
    'reactionAdd': [reaction: MessageReaction, controller: Reaction];
}
export interface ReactionPaginationBuilder<Sent extends boolean = boolean> extends BasePagination<MessageReaction, Sent> {
    on<E extends keyof ReactionPaginationEvents>(event: E, listener: (...args: ReactionPaginationEvents[E]) => Awaitable<void>): this;
    on<E extends string | symbol>(event: Exclude<E, keyof ReactionPaginationEvents>, listener: (...args: any) => Awaitable<void>): this;
    once<E extends keyof ReactionPaginationEvents>(event: E, listener: (...args: ReactionPaginationEvents[E]) => Awaitable<void>): this;
    once<E extends string | symbol>(event: Exclude<E, keyof ReactionPaginationEvents>, listener: (...args: any) => Awaitable<void>): this;
    emit<E extends keyof ReactionPaginationEvents>(event: E, ...args: ReactionPaginationEvents[E]): boolean;
    emit<E extends string | symbol>(event: Exclude<E, keyof ReactionPaginationEvents>, ...args: any): boolean;
    off<E extends keyof ReactionPaginationEvents>(event: E, listener: (...args: ReactionPaginationEvents[E]) => Awaitable<void>): this;
    off<E extends string | symbol>(event: Exclude<E, keyof ReactionPaginationEvents>, listener: (...args: any) => Awaitable<void>): this;
    removeAllListeners<E extends keyof ReactionPaginationEvents>(event?: E): this;
    removeAllListeners(event?: string | symbol): this;
}
export declare class ReactionPaginationBuilder<Sent extends boolean = boolean> extends BasePagination<MessageReaction, Sent> {
    protected _reactions: Reaction[];
    protected _onDisable: ReactionsOnDisable;
    protected _singlePageNoReactions: boolean;
    protected _collector: ReactionCollector | null;
    protected _collectorOptions?: Omit<ReactionCollectorOptions, 'time'>;
    get reactions(): Reaction[];
    get onDisable(): ReactionsOnDisable;
    get singlePageNoReactions(): boolean;
    get collector(): If<Sent, ReactionCollector, null>;
    get collectorOptions(): Omit<ReactionCollectorOptions, "time"> | undefined;
    constructor(options?: ReactionPaginationData | JSONEncodable<ReactionPaginationData>);
    /**
     * Add reaction controller to pagination
     * @param emoji Emoji resolvable
     * @param type Controller type
     */
    addReaction(emoji: string, type: PaginationControllerType | keyof typeof PaginationControllerType): this;
    /**
     * Replace all reaction controllers in pagination
     * @param reactions Reaction controllers
     */
    setReactions(...reactions: RestOrArray<Reaction | RawReaction>): this;
    /**
     * Action on disable
     * @param onDisable on disable action
     */
    setOnDisable(onDisable: ReactionsOnDisable | keyof typeof ReactionsOnDisable): this;
    /**
     * Disable reaction controllers on single page pagination
     * @param singlePageNoReactions single page no reactions
     */
    setSinglePageNoReactions(singlePageNoReactions: boolean): this;
    /**
     * Custom collector options
     * @param collectorOptions collector options
     */
    setCollectorOptions(collectorOptions: Omit<ReactionCollectorOptions, 'time'>): this;
    paginate(command: Message | RepliableInteraction, sendAs?: SendAs | keyof typeof SendAs): Promise<ReactionPaginationBuilder<true>>;
    isSent(): this is ReactionPaginationBuilder<true>;
    toJSON(): ReactionPaginationData;
    protected _addCollector(): void;
    protected _react(): Promise<void>;
    static parseReaction(reaction: Reaction | RawReaction): Reaction;
}
