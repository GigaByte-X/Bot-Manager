import { ActionRowBuilder, ActionRowData, Awaitable, If, JSONEncodable, Message, MessageActionRowComponent, MessageActionRowComponentBuilder, MessageActionRowComponentData, RepliableInteraction, RestOrArray, UserResolvable } from 'discord.js';
import EventEmitter from 'events';
import { DynamicPageFunction, PageData, PageResolvable } from '../types/page';
import { SendAs } from '../types/enums';
export interface BasePaginationData {
    pages?: PageResolvable[];
    authorDependent?: boolean;
    authorId?: UserResolvable | null;
    currentPageIndex?: number;
    timer?: number;
    components?: (ActionRowData<MessageActionRowComponent | MessageActionRowComponentData> | ActionRowBuilder<MessageActionRowComponentBuilder>)[];
}
export interface BasePaginationEvents<Collected> {
    ready: [];
    pageChange: [page: PageData, index: number];
    collect: [collected: Collected];
    end: [reason: string];
}
export interface BasePagination<Collected, Sent extends boolean = boolean> extends EventEmitter {
    on<E extends keyof BasePaginationEvents<Collected>>(event: E, listener: (...args: BasePaginationEvents<Collected>[E]) => Awaitable<void>): this;
    on<E extends string | symbol>(event: Exclude<E, keyof BasePaginationEvents<Collected>>, listener: (...args: any) => Awaitable<void>): this;
    once<E extends keyof BasePaginationEvents<Collected>>(event: E, listener: (...args: BasePaginationEvents<Collected>[E]) => Awaitable<void>): this;
    once<E extends string | symbol>(event: Exclude<E, keyof BasePaginationEvents<Collected>>, listener: (...args: any) => Awaitable<void>): this;
    emit<E extends keyof BasePaginationEvents<Collected>>(event: E, ...args: BasePaginationEvents<Collected>[E]): boolean;
    emit<E extends string | symbol>(event: Exclude<E, keyof BasePaginationEvents<Collected>>, ...args: any): boolean;
    off<E extends keyof BasePaginationEvents<Collected>>(event: E, listener: (...args: BasePaginationEvents<Collected>[E]) => Awaitable<void>): this;
    off<E extends string | symbol>(event: Exclude<E, keyof BasePaginationEvents<Collected>>, listener: (...args: any) => Awaitable<void>): this;
    removeAllListeners<E extends keyof BasePaginationEvents<Collected>>(event?: E): this;
    removeAllListeners(event?: string | symbol): this;
}
export declare class BasePagination<Collected, Sent extends boolean = boolean> extends EventEmitter {
    protected _pages: (PageData | DynamicPageFunction)[];
    protected _authorId: string | null;
    protected _currentPageIndex: number;
    protected _timer: number;
    protected _pagination: Message | null;
    protected _authorDependent: boolean;
    protected _command: Message | RepliableInteraction | null;
    protected _components: (ActionRowData<MessageActionRowComponent | MessageActionRowComponentData> | ActionRowBuilder<MessageActionRowComponentBuilder>)[];
    protected _paginationComponent: ActionRowData<MessageActionRowComponent | MessageActionRowComponentData> | ActionRowBuilder<MessageActionRowComponentBuilder> | null;
    protected _disableAllComponents: boolean;
    protected _removeAllComponents: boolean;
    protected _removePaginationComponents: boolean;
    get pages(): (PageData | DynamicPageFunction)[];
    get currentPageIndex(): number;
    get currentPage(): Promise<PageData | undefined>;
    get timer(): number;
    get pagination(): If<Sent, Message<boolean>, null>;
    get authorDependent(): boolean;
    get command(): If<Sent, Message<boolean> | RepliableInteraction<import("discord.js").CacheType>, null>;
    get components(): (ActionRowBuilder<MessageActionRowComponentBuilder> | ActionRowData<MessageActionRowComponent | MessageActionRowComponentData>)[];
    get previousPageIndex(): number;
    get nextPageIndex(): number;
    get authorId(): string | null;
    constructor(options?: BasePaginationData | JSONEncodable<BasePaginationData>);
    /**
     * Add pages to pagination
     * @param pages array of page data to add
     */
    addPages(...pages: RestOrArray<PageResolvable>): this;
    /**
     * Clear and set pagination pages
     * @param pages array of page data
     */
    setPages(...pages: RestOrArray<PageResolvable>): this;
    /**
     * Pagination will only works for command author
     * @param authorDependent set author dependent
     */
    setAuthorDependent(authorDependent: boolean): this;
    /**
     * Set author id
     * @param author author user resolvable
     */
    setAuthorId(author?: UserResolvable | null): this;
    /**
     * Add action rows to page components
     * @param components action rows
     */
    addComponents(...components: RestOrArray<ActionRowData<MessageActionRowComponent> | ActionRowBuilder<MessageActionRowComponentBuilder>>): this;
    /**
     * Set page action rows
     * @param components action rows
     */
    setComponents(...components: RestOrArray<ActionRowData<MessageActionRowComponent> | ActionRowBuilder<MessageActionRowComponentBuilder>>): this;
    /**
     * Collector timer
     * @param timer timer in milliseconds
     */
    setTimer(timer: number): this;
    /**
     * Get page data by index
     * @param pageIndex page index
     */
    getPage(pageIndex: number): Promise<PageData | undefined>;
    /**
     * Check if pagination is sent
     */
    isSent(): this is BasePagination<Collected, true>;
    toJSON(): BasePaginationData;
    /**
     * Set current pagination page by index
     * @param pageIndex page index
     */
    setCurrentPage(pageIndex?: number, editComponentsOnly?: boolean): Promise<PageData>;
    /**
     * Send the pagination message
     * @param page Pagination page
     * @param sendAs Send type
     */
    protected _sendPage(page: PageData, sendAs: SendAs): Promise<void>;
    /**
     * Resolve pagination pages except for dynamic page functions
     * @param pages resolvable pages
     */
    static resolveStaticPages(...pages: RestOrArray<PageResolvable>): (PageData | DynamicPageFunction)[];
    /**
     * Resolve pagination pages
     * @param pages resolvable pages
     */
    static resolvePages(...pages: RestOrArray<PageResolvable>): Promise<PageData[]>;
}
